#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// --- Socket.IO integration start ---
const { Server } = require('socket.io');
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

// In-memory room state
const rooms = {};

io.on('connection', (socket) => {
  socket.on('join-room', (roomId, userId) => {
    socket.join(roomId);
    if (!rooms[roomId]) rooms[roomId] = { users: {}, video: { url: '', playing: false, time: 0 } };
    rooms[roomId].users[socket.id] = userId;
    // Send all users and current video state to new user
    socket.emit('room-state', {
      users: Object.entries(rooms[roomId].users).map(([id, uid]) => ({ socketId: id, userId: uid })),
      video: rooms[roomId].video
    });
    // Notify others
    socket.to(roomId).emit('user-joined', { socketId: socket.id, userId });
  });

  // WebRTC signaling relay
  socket.on('signal', ({ roomId, signal, to }) => {
    io.to(to).emit('signal', { from: socket.id, signal });
  });

  // Video sync events (url, play, pause, seek)
  socket.on('video-sync', ({ roomId, action, url, time, playing }) => {
    if (rooms[roomId]) {
      if (action === 'url') rooms[roomId].video.url = url;
      if (action === 'play') rooms[roomId].video.playing = true;
      if (action === 'pause') rooms[roomId].video.playing = false;
      if (action === 'seek') rooms[roomId].video.time = time;
    }
    socket.to(roomId).emit('video-sync', { action, url, time, playing });
  });

  // Chat
  socket.on('chat-message', ({ roomId, userId, message }) => {
    io.to(roomId).emit('chat-message', { userId, message });
  });

  // Emoji reactions
  socket.on('emoji', ({ roomId, userId, emoji }) => {
    io.to(roomId).emit('emoji', { userId, emoji });
  });

  socket.on('disconnecting', () => {
    for (const roomId of socket.rooms) {
      if (roomId !== socket.id && rooms[roomId]) {
        delete rooms[roomId].users[socket.id];
        socket.to(roomId).emit('user-left', socket.id);
        // Clean up room if empty
        if (Object.keys(rooms[roomId].users).length === 0) delete rooms[roomId];
      }
    }
  });
});
// --- Socket.IO integration end ---

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
